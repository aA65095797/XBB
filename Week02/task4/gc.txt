gc算法：
1.标记删除，标记可达对象，删除不可达对象，该方法会导致大量内存碎片
2.标记整理，在标记清楚的基础上，增加一个整理内存碎片的过程，该方法会导致gc暂停时间增厂
3.复制，在新生代使用比较广泛，效率高，但是会浪费一部分内存，核心就是利用空间换取时间
4.分代收集算法，根据不同的区域使用不同的垃圾回收算法
从上述可以知道，新生代基本上都是使用复制算法，复制算法的核心就是利用空间换取时间。比如to和from进行来回的倒腾进行垃圾收集

常见各个gc收集器：
1.Serial （用于新生代，采用复制算法）（串行收集器）
2.Serial Old（用于老年代，采用标记整理算法）（串行收集器）
3.ParNew（用于新生代，采用复制算法）（并行收集器）
4.Parallel Old（用于老年代，采用标记整理算法）（并行收集器）
5.Parallel Scavenge（用新生代，采用复制算法）（并行收集器）
6.CMS（用于老年代，采用标记清除算法）（并发收集器）
7.G1（可以进行整堆收集）（并发收集器）

串行GC
-XX:+UseSerialGC
-XX:+USeParNewGC
串行 GC 对年轻代使用 mark-copy（标记-复制） 算法，对老年代使用 mark-sweep-compact（标记-清除-
整理）算法。
单线程，所以stw暂停时间会比较长，只适合几百 MB 堆内存的 JVM，而且是单核 CPU 时比较有用。
不需要过多的深入，基本上没有线上服务会使用

并行 GC
-XX:+UseParallelGC
-XX:+UseParallelOldGC
-XX:+UseParallelGC -XX:+UseParallelOldGC
-XX：ParallelGCThreads=N 来指定 GC 线程数， 其默认值为 CPU 核心数。
可以理解为串行GC的升级版，采用多线程处理方式，更加合理的使用系统资源，达到更大的吞吐量。

CMS GC （针对老年代的收集）
-XX:+UseConcMarkSweepGC
共分为：
阶段 1: Initial Mark（初始标记）
阶段 2: Concurrent Mark（并发标记）
阶段 3: Concurrent Preclean（并发预清理）
阶段 4: Final Remark（最终标记）
阶段 5: Concurrent Sweep（并发清除）
阶段 6: Concurrent Reset（并发重置）
部分GC过程和用户线程可以并发执行（在所有过程中初始标记和重新标记是STW的），以此来达到降低收集停顿时间的目的。
对年轻代使用 mark-copy（标记-复制） 算法，对老年代使用 mark-sweep（标记-清除）
如果在并行清理的过程中老年代的空间不足以容纳应用产生的垃圾（也就是老年代正在清理，从年轻代晋升了新的对象，或者直接分配大对象年轻代放不下导致直接在老年代生成，这时候老年代也放不下），
则会抛出“concurrent mode failure”。
老年代的垃圾收集器从CMS退化为Serial Old，所有应用线程被暂停，停顿时间变长。
缺点：
1.无法处理浮动垃圾
2.产生大量的空间碎片
3.并发模式失败（Concurrent model failure）会降级为串行GC
Concurrent model failure解决办法：
原因1：CMS触发太晚
方案：将-XX:CMSInitiatingOccupancyFraction=N调小；
原因2：空间碎片太多
方案：开启空间碎片整理，并将空间碎片整理周期设置在合理范围；
-XX:+UseCMSCompactAtFullCollection （空间碎片整理）
-XX:CMSFullGCsBeforeCompaction=n  默认为0(多少次FUllGC之后堆内存空间进行压缩整理)
原因3：垃圾产生速度超过清理速度
晋升阈值过小；
Survivor空间过小；
Eden区过小，导致晋升速率提高；
存在大对象；

G1 GC （整个堆的收集）
（Garbage-First）收集器，意为垃圾优先，哪一块的垃圾最多就优先清理它。通过划分多个内存区域做增量整理和回收，进一步降低延迟；
每个小块，可能一会被定义成 Eden 区，一会被指定为 Survivor
 区或者Old 区。在逻辑上，所有的 Eden 区和 Survivor 区合起来
 就是年轻代，所有的 Old 区拼在一起那就是老年代。
G1是一个有整理内存过程的垃圾收集器，不会产生很多内存碎片
G1的Stop The World（STW）更可控，G1在停顿时间上添加了预测机制，用户可以指定期望时间。

-XX：+UseG1GC：启用 G1 GC；
-XX：G1NewSizePercent：初始年轻代占整个 Java Heap 的大小，默认值为 5%；
-XX：G1MaxNewSizePercent：最大年轻代占整个 Java Heap 的大小，默认值为 60%；
-XX：G1HeapRegionSize：设置每个 Region 的大小，单位 MB，需要为 1、2、4、8、16、32 中的某个值，默认是堆内存的
1/2000。如果这个值设置比较大，那么大对象就可以进入 Region 了；
-XX：ConcGCThreads：与 Java 应用一起执行的 GC 线程数量，默认是 Java 线程的 1/4，减少这个参数的数值可能会提升并行回收
的效率，提高系统内部吞吐量。如果这个数值过低，参与回收垃圾的线程不足，也会导致并行回收机制耗时加长；
-XX：+InitiatingHeapOccupancyPercent（简称 IHOP）：G1 内部并行回收循环启动的阈值，默认为 Java Heap的 45%。这个可
以理解为老年代使用大于等于 45% 的时候，JVM 会启动垃圾回收。这个值非常重要，它决定了在什么时间启动老年代的并行回收；
-XX：G1HeapWastePercent：G1停止回收的最小内存大小，默认是堆大小的 5%。GC 会收集所有的 Region 中的对象，但是如果
下降到了 5%，就会停下来不再收集了。就是说，不必每次回收就把所有的垃圾都处理完，可以遗留少量的下次处理，这样也降低了
单次消耗的时间；
-XX：+GCTimeRatio：这个参数就是计算花在 Java 应用线程上和花在 GC 线程上的时间比率，默认是 9，跟新生代内存的分配比例一
致。这个参数主要的目的是让用户可以控制花在应用上的时间，G1 的计算公式是 100/（1+GCTimeRatio）。这样如果参数设置为
9，则最多 10% 的时间会花在 GC 工作上面。Parallel GC 的默认值是 99，表示 1% 的时间被用在 GC 上面，这是因为 Parallel GC 贯
穿整个 GC，而 G1 则根据 Region 来进行划分，不需要全局性扫描整个内存堆。
-XX：MaxGCPauseMills：预期 G1 每次执行 GC 操作的暂停时间，单位是毫秒，默认值是 200 毫秒，G1 会尽量保证控制在这个范围
内。



选择正确的 GC 算法，唯一可行的方式就是去尝试，一般性的指导原则：
1. 如果系统考虑吞吐优先，CPU 资源都用来最大程度处理业务，用 Parallel GC；
2. 如果系统考虑低延迟有限，每次 GC 时间尽量短，用 CMS GC；
3. 如果系统内存堆较大，同时希望整体来看平均 GC 时间可控，使用 G1 GC。
对于内存大小的考量：
1. 一般 4G 以上，算是比较大，用 G1 的性价比较高。
2. 一般超过 8G，比如 16G-64G 内存，非常推荐使用 G1 GC。













